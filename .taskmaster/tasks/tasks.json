{
  "master": {
    "tasks": [
      {
        "id": 1,
        "title": "Setup Authentication System with Role-Based Access",
        "description": "Implement a JWT-based authentication system with distinct roles for teachers and students, including signup, login, and session management.",
        "details": "Create authentication endpoints using JWT tokens with role-based access control (RBAC). Implement the database tables for teachers and students as specified in the data model. Ensure proper validation of email and password. Setup middleware for route protection based on user roles. Consider using a BaaS like Supabase or Firebase for authentication, or implement custom JWT handling with proper security measures. Implement Row-Level Security (RLS) at the database level to restrict data access based on user roles and ownership.",
        "testStrategy": "Unit tests for authentication endpoints. Integration tests for role-based access control. Security testing for JWT implementation including token expiration and refresh mechanisms. Test user registration, login flows, and authorization for both teacher and student roles.",
        "priority": "high",
        "dependencies": [],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 2,
        "title": "Implement Database Schema and Data Models",
        "description": "Set up the relational database with the schema defined in the PRD, including vector support for embeddings and proper relationships between entities.",
        "details": "Implement the PostgreSQL database schema as defined in section 7.1 of the PRD. Create tables for teachers, students, classes, pdfs, questions, assignments, assignment_questions, and submissions. Ensure proper foreign key constraints and indexes. Set up vector extension for PostgreSQL to support the embedding field in the questions table. Implement database migrations for version control of the schema. Configure Row-Level Security policies to enforce data access restrictions based on user roles and ownership.",
        "testStrategy": "Unit tests for database models and relationships. Integration tests for complex queries. Performance testing for vector operations. Validate foreign key constraints and cascading behaviors. Test RLS policies to ensure proper data isolation between users.",
        "priority": "high",
        "dependencies": [
          1
        ],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 3,
        "title": "Develop Teacher Dashboard and Class Management",
        "description": "Create the teacher dashboard with tiles for Classes, Open Assignments, and At-Risk Students, along with full CRUD functionality for class management.",
        "details": "Implement a responsive tablet-optimized UI using React Native/Expo or Flutter as specified in the PRD. Create a dashboard with three main tiles: Classes, Open Assignments, and At-Risk Students. Implement tab-based interface for class management with tabs for Roster, Content, Assignments, and a placeholder for Analytics. Build CRUD operations for classes including creation, listing, editing, and deletion. Implement student roster management within classes. Ensure the UI meets WCAG 2.1 AA compliance requirements. Use a component-based architecture for reusability and maintainability.",
        "testStrategy": "Unit tests for UI components. Integration tests for CRUD operations. Usability testing on various tablet devices. Accessibility testing for WCAG 2.1 AA compliance. Performance testing to ensure UI responsiveness meets the p95 < 150ms requirement.",
        "priority": "medium",
        "dependencies": [
          1,
          2
        ],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 4,
        "title": "Implement Secure PDF Upload Pipeline",
        "description": "Create a secure file upload system from client to cloud storage using presigned URLs, with proper validation and metadata tracking.",
        "details": "Implement a secure PDF upload system using presigned URLs to a cloud object store (e.g., AWS S3, Google Cloud Storage). Create an endpoint to generate presigned URLs for client-side uploads. Implement file type validation and size limits. Store metadata in the pdfs table including references to the class_id and storage_path. Set up proper CORS configuration for the storage bucket. Implement progress tracking for uploads. Trigger a parsing job upon successful upload completion using a message queue or event system.",
        "testStrategy": "Unit tests for URL generation and metadata storage. Integration tests for the complete upload flow. Security testing for URL expiration and access controls. Performance testing for large file uploads. Test error handling for failed uploads and invalid file types.",
        "priority": "medium",
        "dependencies": [
          2,
          3
        ],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 5,
        "title": "Develop PDF Parsing Job for Question Extraction",
        "description": "Create an asynchronous job to extract question-and-answer blocks from uploaded PDFs, storing structured data and generating text embeddings.",
        "details": "Implement an asynchronous PDF parsing service using a queue-based system (e.g., AWS SQS, RabbitMQ). Use PDF extraction libraries to identify and extract question-and-answer blocks from uploaded PDFs. Implement fallback to OCR if structured extraction fails as mentioned in the risk mitigation. Generate vector embeddings for extracted questions using an appropriate embedding model (e.g., OpenAI embeddings, Sentence Transformers). Store extracted questions and their embeddings in the questions table. Implement robust error handling and logging for parsing failures. Set up monitoring for parse success rates.",
        "testStrategy": "Unit tests for PDF parsing logic. Integration tests with a diverse suite of PDF samples. Performance testing for large PDFs. Validation of extracted question-answer pairs. Test embedding generation and storage. Monitor and test parse success rates across different PDF layouts.",
        "priority": "high",
        "dependencies": [
          2,
          4
        ],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 6,
        "title": "Build Assignment Creation Interface",
        "description": "Develop the assignment builder UI for teachers to select questions from their content library, set due dates, and configure hint mode.",
        "details": "Create an intuitive assignment builder interface for teachers. Implement a browsable question library filtered by class content. Enable multi-selection of questions from the parsed content. Add functionality to set assignment due dates with a date picker. Implement a toggle for the 'Hint Mode' setting. Create the database entries in assignments and assignment_questions tables upon submission. Ensure the UI is optimized for tablet use with appropriate touch targets and interactions. Implement validation to prevent empty assignments or invalid due dates.",
        "testStrategy": "Unit tests for UI components and form validation. Integration tests for assignment creation flow. Usability testing with teacher persona. Performance testing to ensure the assignment creation process meets the 'â‰¤ 3 min' target. Test database integrity for created assignments.",
        "priority": "medium",
        "dependencies": [
          3,
          5
        ],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 7,
        "title": "Implement Student Workspace",
        "description": "Create a workspace for students to view, answer, and submit assignments, with support for text or photo answers.",
        "details": "Develop a student workspace UI optimized for tablet interaction. Implement a list view of assigned work with due dates and completion status. Create a question viewer with support for rendering question content. Build answer input components supporting both text entry and photo uploads. Implement submission functionality to store answers in the submissions table as JSONB. Add progress tracking and save functionality to prevent work loss. Ensure the workspace meets accessibility requirements. Implement client-side caching for better UX during connectivity issues as mentioned in the risk mitigation.",
        "testStrategy": "Unit tests for UI components and submission logic. Integration tests for the complete assignment workflow. Usability testing with student persona. Accessibility testing for WCAG compliance. Test offline behavior and data persistence during connectivity issues. Performance testing for image uploads and rendering.",
        "priority": "medium",
        "dependencies": [
          1,
          2,
          6
        ],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 8,
        "title": "Develop RAG-based Hint Generation System",
        "description": "Implement a Retrieval-Augmented Generation system to provide hints without revealing answers, using semantic search over curriculum content.",
        "details": "Implement a RAG-based hint generation system using vector similarity search. Create an endpoint that accepts a question ID and student query. Perform semantic search over class-scoped curriculum content using the vector embeddings. Integrate with a cost-effective LLM API (e.g., OpenAI, Anthropic, or open-source alternatives). Implement a robust system prompt that constrains the LLM to provide hints without revealing direct answers. Add rate limiting to prevent abuse (5 requests/minute per user per question). Implement token counting and budget monitoring. Set up logging for AI interactions including user identifiers, model used, token counts, and latency.",
        "testStrategy": "Unit tests for vector search functionality. Integration tests for the complete RAG pipeline. Validation testing to ensure hints don't reveal answers. Performance testing for response time (target: < 4s RTT). Load testing for concurrent hint requests. Test rate limiting functionality. Monitor and test for guardrail violations.",
        "priority": "high",
        "dependencies": [
          2,
          5,
          7
        ],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 9,
        "title": "Create Teacher Progress View",
        "description": "Develop a dashboard for teachers to view and assess student submissions and scores across assignments.",
        "details": "Implement a teacher progress view dashboard to monitor student work. Create a view of submitted assignments with completion status across the class. Build an interface to review individual student submissions. Implement manual scoring functionality for teachers to grade submissions. Add filtering and sorting options for submissions (e.g., by student, by date, by completion status). Highlight at-risk students based on submission patterns and scores. Ensure the interface is optimized for tablet use with appropriate visualizations and interactions.",
        "testStrategy": "Unit tests for UI components and data display. Integration tests for submission review and scoring workflow. Usability testing with teacher persona. Performance testing for loading large sets of submissions. Test filtering and sorting functionality. Validate correct calculation and display of class statistics.",
        "priority": "medium",
        "dependencies": [
          3,
          7
        ],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 10,
        "title": "Implement Analytics, Monitoring and Deployment Pipeline",
        "description": "Set up comprehensive analytics, monitoring, and observability systems along with a robust deployment pipeline for the application.",
        "details": "Implement product analytics tracking for MAU, DAU/MAU, hints/assignment, PDF parse success rate, and assignment creation volume. Set up teacher-facing analytics for class average scores, assignment completion rates, and at-risk student identification. Configure AI operations monitoring for token consumption, cost per hint, hint latency, and guardrail violations. Integrate with logging, monitoring, and error tracking services (e.g., Sentry, Datadog) as specified in the PRD. Implement alerting for critical metrics and error thresholds. Set up a CI/CD pipeline for automated testing and deployment. Configure infrastructure as code for reproducible environments. Implement database backup and recovery procedures.",
        "testStrategy": "Validation of analytics data collection and reporting. Integration tests for monitoring systems. Load testing to validate performance under expected user load. Security testing for the complete application. End-to-end testing of the deployment pipeline. Disaster recovery testing for database and application components.",
        "priority": "medium",
        "dependencies": [
          1,
          2,
          3,
          4,
          5,
          6,
          7,
          8,
          9
        ],
        "status": "pending",
        "subtasks": []
      }
    ],
    "metadata": {
      "created": "2025-06-15T14:54:00.080Z",
      "updated": "2025-06-15T14:54:00.080Z",
      "description": "Tasks for master context"
    }
  }
}